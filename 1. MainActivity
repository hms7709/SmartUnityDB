1. MainActivity.Java

package com.example.program000;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity {

    private static BluetoothAdapter mBluetoothAdapter;
    private static BluetoothDevice mDevice;

    final int OFFSET = 400; // The offset of Y value to be plot
    final int MAX_Y_NUMBER = 80; // The number of Y value to be plot
    final int GRAPH_WIDTH = 800;
    final int GRAPH_HEIGHT = 800;
    final int SYNC_TIME = 500;  // 아두이노와 스마트폰의 동기 속도 조정
    final int BUFFER_LENGTN = 1024;
    String Y_string="",before_Y_string="";
    private ConnectThread mConnectThread;
    private ConnectedThread mConnectedThread;
    byte[] wBuf;
    int Count_Power = 0;
    int Count_Graph = 0;
    int Num_Graph = 0;
    int Count_Motor = 0;
    int Num_Motor = 0;
    int Count_Security = 0;
    int graph_able = 0;
    Button Power_button, DrawGraph_button,Motor_control_button,Temp_button,Humi_button,Motor_button,Speed_control_button;
    ToggleButton Security_toggle;
    RadioGroup Radio_grup_button;
    ImageView mImageView;
    TextView mTextView;
    EditText pass_Word;
    Bitmap bitmap;
    Canvas canvas;
    Paint paint;
    RadioButton rd;
    String Speed_order;
    View Action;
    Spinner Mode_select;
    byte[] rBuffer = new byte[BUFFER_LENGTN];
    int[] plotYValue = new int[MAX_Y_NUMBER];
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Action= getLayoutInflater().inflate(R.layout.action_bar,null);
        Power_button = (Button) findViewById(R.id.button_power);
        DrawGraph_button = (Button) findViewById(R.id.button_graph);
        Motor_control_button = (Button)findViewById(R.id.button_motor);
        Temp_button = (Button)findViewById(R.id.temp_button);
        Humi_button = (Button)findViewById(R.id.humi_button);
        Motor_button = (Button)findViewById(R.id.motor_button);
        Speed_control_button = (Button)findViewById(R.id.speed_control_button);
        Radio_grup_button = (RadioGroup)findViewById(R.id.radioGroup);
        pass_Word = (EditText)Action.findViewById(R.id.pass_word);
        Security_toggle = (ToggleButton)Action.findViewById(R.id.SecurityToggle);
        Mode_select = (Spinner)Action.findViewById(R.id.Mode_Select);
        Mode_select.setEnabled(false);
        Power_button.setEnabled(false);
        DrawGraph_button.setEnabled(false);
        Motor_control_button.setEnabled(false);
        Humi_button.setVisibility(View.INVISIBLE);
        Temp_button.setVisibility(View.INVISIBLE);
        Motor_button.setVisibility(View.INVISIBLE);
        Speed_control_button.setVisibility(View.INVISIBLE);
        Radio_grup_button.setVisibility(View.INVISIBLE);
        pass_Word.setVisibility(View.INVISIBLE);
        ActionBar actionBar = getSupportActionBar();
        actionBar.setCustomView(Action);
        actionBar.setDisplayShowCustomEnabled(true);
        mImageView = (ImageView) findViewById(R.id.imageView);
        mTextView = (TextView) findViewById(R.id.textViewMonitor);
        bitmap = Bitmap.createBitmap(GRAPH_WIDTH,GRAPH_HEIGHT, Bitmap.Config.ARGB_8888);
        canvas = new Canvas(bitmap);
        paint = new Paint();
    }

    @Override
    protected void onResume() {
        super.onResume();

        blueToothSetup();
        mConnectThread = new ConnectThread(mDevice);
        mConnectThread.start();

        // ------------- 여기에 아두이노에 보내는 데이터 정의 -------------------------

        Power_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (Count_Power) {
                    case 0:                     ///LED 0ON
                    {
                        wBuf = new byte[]{(byte) 'a'};
                        mConnectedThread.write(wBuf);
                        mTextView.setText("POWER ON" + wBuf[0]);
                        Power_button.setText("POWER OFF");
                        DrawGraph_button.setEnabled(true);
                        Motor_control_button.setEnabled(true);
                        Count_Power = 1;
                        switch(Mode_select.getSelectedItemPosition())
                        {
                            case 0:
                            {
                                wBuf = new byte[]{(byte) '@'};
                                mConnectedThread.write(wBuf);
                                break;
                            }
                            case 1:
                            {
                                wBuf = new byte[]{(byte) '#'};
                                mConnectedThread.write(wBuf);
                                break;
                            }
                        }
                        break;
                    }
                    case 1:                     ////LED 0OFF
                    {
                        wBuf = new byte[]{(byte) 'A'};
                        mConnectedThread.write(wBuf);
                        mTextView.setText("POWER OFF" + wBuf[0]);
                        Power_button.setText("POWER ON");
                        Count_Power = 0;
                        DrawGraph_button.setText("그래프 보기");
                        Power_button.setText("POWER ON");
                        Motor_control_button.setText("모터 가동");
                        Count_Graph=0;
                        Count_Power=0;
                        Count_Motor=0;
                        DrawGraph_button.setEnabled(false);
                        Motor_control_button.setEnabled(false);
                        DrawGraph_button.setEnabled(false);
                        Motor_control_button.setEnabled(false);
                        Humi_button.setVisibility(View.INVISIBLE);
                        Temp_button.setVisibility(View.INVISIBLE);
                        Motor_button.setVisibility(View.INVISIBLE);
                        Speed_control_button.setVisibility(View.INVISIBLE);
                        Radio_grup_button.setVisibility(View.INVISIBLE);
                        mImageView.setImageResource(R.drawable.graph);
                        break;
                    }
                }
            }
        });

        DrawGraph_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (Count_Graph) {
                    case 0: {
                        wBuf = new byte[]{(byte) 'b'};
                        mTextView.setText("그래프 보기" + wBuf[0]);
                        DrawGraph_button.setText("그래프 종료");
                        Count_Graph = 1;
                        Humi_button.setVisibility(View.VISIBLE);
                        Temp_button.setVisibility(View.VISIBLE);
                        Motor_button.setVisibility(View.VISIBLE);
                        graph_able = 1;
                        Y_string = before_Y_string;
                        break;
                    }
                    case 1: {
                        wBuf = new byte[]{(byte) 'B'};
                        mTextView.setText("그래프 종료" + wBuf[0]);
                        DrawGraph_button.setText("그래프 보기");
                        Count_Graph = 0;
                        Humi_button.setVisibility(View.INVISIBLE);
                        Temp_button.setVisibility(View.INVISIBLE);
                        Motor_button.setVisibility(View.INVISIBLE);
                        mImageView.setImageResource(R.drawable.graph);
                        graph_able = 0;
                        before_Y_string = Y_string;
                        break;
                    }
                }

                mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
            }
        });
        Temp_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                wBuf = new byte[]{(byte) 'T'};
                mTextView.setText("온도 전송" + wBuf[0]);
                Y_string = "온도";
                graph_able = 1;
                mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
            }
        });
        Humi_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                wBuf = new byte[]{(byte) 'H'};
                mTextView.setText("습도 전송" + wBuf[0]);
                Y_string = "습도";
                graph_able = 1;
                mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
            }
        });
        Motor_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                wBuf = new byte[]{(byte) 'M'};
                mTextView.setText("모터 속도 전송" + wBuf[0]);
                Y_string = "모터 속도";
                graph_able = 1;
                mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
            }
        });
        Motor_control_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                switch (Count_Motor) {
                    case 0: {
                        wBuf = new byte[]{(byte) 'c'};       //   LED1 ON
                        mTextView.setText("모터 가동 : " + wBuf[0]);
                        Motor_control_button.setText("모터 정지");
                        mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
                        Count_Motor = 1;
                        Speed_control_button.setVisibility(View.VISIBLE);
                        Radio_grup_button.setVisibility(View.VISIBLE);
                        break;
                    }
                    case 1: {
                        wBuf = new byte[]{(byte) 'C'};       //   LED2 ON
                        mTextView.setText("모터 정지 : " + wBuf[0]);
                        Motor_control_button.setText("모터 가동");
                        mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
                        Count_Motor = 0;
                        Speed_control_button.setVisibility(View.INVISIBLE);
                        Radio_grup_button.setVisibility(View.INVISIBLE);
                        break;
                    }
                }
            }
        });
        Speed_control_button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                try {
                    int id = Radio_grup_button.getCheckedRadioButtonId();
                    rd = (RadioButton) findViewById(id);
                    Speed_order = rd.getText().toString();
                    switch (Speed_order) {
                        case "멈춤": {
                            wBuf = new byte[]{(byte) '0'};
                            mTextView.setText("SPEED:멈춤 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        case "50": {
                            wBuf = new byte[]{(byte) '1'};
                            mTextView.setText("SPEED:50 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        case "100": {
                            wBuf = new byte[]{(byte) '2'};
                            mTextView.setText("SPEED:100 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        case "150": {
                            wBuf = new byte[]{(byte) '3'};
                            mTextView.setText("SPEED:150 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        case "200": {
                            wBuf = new byte[]{(byte) '4'};
                            mTextView.setText("SPEED:200 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        case "255": {
                            wBuf = new byte[]{(byte) '5'};
                            mTextView.setText("SPEED:255 : " + wBuf[0]);
                            mConnectedThread.write(wBuf);
                            break;
                        }
                        default: {
                            break;
                        }
                    }
                } catch (Exception e) {
                    Speed_order = "선택 잘못함";
                }
            }
        });
        Security_toggle.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mTextView.setText("비상정지");
                if (Security_toggle.isChecked()) {
                    Count_Security = 1;
                    wBuf = new byte[]{(byte) '!'};       //   LED1,LED2 ON
                    mTextView.setText("비상 정지 시작 : " + wBuf[0]);
                    mConnectedThread.write(wBuf);   // 아두이노에 데이터 전송
                    DrawGraph_button.setEnabled(false);
                    Motor_control_button.setEnabled(false);
                    DrawGraph_button.setEnabled(false);
                    Motor_control_button.setEnabled(false);
                    Humi_button.setVisibility(View.INVISIBLE);
                    Temp_button.setVisibility(View.INVISIBLE);
                    Motor_button.setVisibility(View.INVISIBLE);
                    Speed_control_button.setVisibility(View.INVISIBLE);
                    Radio_grup_button.setVisibility(View.INVISIBLE);
                    DrawGraph_button.setText("그래프 보기");
                    Power_button.setText("POWER ON");
                    Motor_control_button.setText("모터 가동");
                    Count_Graph=0;
                    Count_Power=0;
                    Count_Motor=0;
                    Power_button.setEnabled(false);
                    mImageView.setImageResource(R.drawable.security);
                    pass_Word.setVisibility(View.VISIBLE);
                    graph_able = 0;
                }
                else
                {
                    if(pass_Word.getText().toString().equals("2017SAW"))
                    {
                        pass_Word.setText("");
                        pass_Word.setVisibility(View.INVISIBLE);
                        Count_Security = 0;
                        wBuf = new byte[]{(byte) '*'};       //   LED3 ON
                        mTextView.setText("비상 정지 종료 : " + wBuf[0]);
                        mConnectedThread.write(wBuf);
                        mImageView.setImageResource(R.drawable.graph);
                        Power_button.setEnabled(true);
                    }
                    else
                    {
                        pass_Word.setText("");
                        Toast.makeText(getApplicationContext(), "비밀번호를 틀렸습니다. 다시 입력해주세요.",Toast.LENGTH_SHORT).show();
                        Security_toggle.setChecked(true);
                    }
                }
            }
        });
        // ------------- 여기에 아두이노에 보내는 데이터 정의 --------------------------------
    }
    // ------------------- 그래프 그리기


    Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            switch (msg.what) {
                case 1:
                    if(graph_able == 1)
                    {
                        byte[] readBuf = (byte[]) msg.obj;
                        int availByte = (int) msg.arg1;
                        int retByte = (int) msg.arg2;

                        for (int i = 0; i < MAX_Y_NUMBER; i++) {
                            plotYValue[i] = OFFSET;    // 그래프의 Y 값 조정
                            plotYValue[i] -= readBuf[i];
                        }
                        mTextView.setText("Read Data (" + availByte + "," + retByte + ") -> "
                                + readBuf[0] + "," + plotYValue[0] + "," + readBuf[1] + "," + plotYValue[1]);
                        drawGraph();
                        break;
                    }
                case 2:
                    Power_button.setEnabled(true);
                    Humi_button.setVisibility(View.INVISIBLE);
                    Temp_button.setVisibility(View.INVISIBLE);
                    Motor_button.setVisibility(View.INVISIBLE);
                    break;
            }

        }
    };

    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;
        private final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");

        public ConnectThread(BluetoothDevice device) {
            BluetoothSocket tmp = null;
            mmDevice = device;
            try {
                tmp = mmDevice.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) {
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        mTextView.setText("블루투스 장치의 전원을 확인 하세요!!");
                    }
                });
            }
            mmSocket = tmp;
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mTextView.setText("블루투스 통신을 위한 소켓이 생성 되었습니다!!");
                }
            });
        }
        public void run() {
            mBluetoothAdapter.cancelDiscovery();
            try
            {
                mmSocket.connect();
            }
            catch (IOException connectException) {

                try {
                    mHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            mTextView.setText("블루투스 장치의 전원을 OFF->ON 하세요!");
                        }
                    });
                    mmSocket.close();
                } catch (IOException closeException) { }
                return;
            }
            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mTextView.setText("블루투스 장치에 프로그램이 실행 되고 있습니다!");
                }
            });

            mConnectedThread = new ConnectedThread(mmSocket);
            mConnectedThread.start();

            mHandler.obtainMessage(2, 0, 0, null).sendToTarget();  // enable button
        }
        public void cancel() {
            try {
                if (mmSocket != null)
                    mmSocket.close();
            } catch (IOException e) { }
        }
    }


    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;
        private int  readBytes =0;
        private int availByte =0;


        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            InputStream tmpIn = null;
            OutputStream tmpOut = null;
            try {
                tmpIn = mmSocket.getInputStream();
                tmpOut =mmSocket.getOutputStream();
            } catch (IOException e) { }
            mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }



        public void run() {

            while (true)
            {
                try {
                    Thread.sleep(SYNC_TIME);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                try
                {
                    readBytes = 0;
                    availByte = mmInStream.available();
                    if (availByte == 0) continue;
                    if (availByte > rBuffer.length) availByte = rBuffer.length;
                    readBytes = mmInStream.read(rBuffer,0, availByte);
                    mHandler.obtainMessage(1, availByte, readBytes, rBuffer).sendToTarget();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                    break;
                }
            }
        }
        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);
            } catch (IOException e) { }
        }
        public void cancel() {
            try {
                if (mmSocket != null)
                    mmSocket.close();
            } catch (IOException e) { }
        }
    }

    void blueToothSetup() {
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBluetoothAdapter == null) {
            // Device does not support Bluetooth
            mTextView.setText("스마트폰에 블루투스 기능이 내장되어 있는지 확인 하세요!!");
        }

            if (!mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, 1);
        } else {
            mTextView.setText("블루투스 기능이 활성화(Enable) 되어 있습니다!!");
        }

        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
        mTextView.setText("등록된(Bonded) 블루투스 장치 숫자 : " + pairedDevices.size());
        if (pairedDevices.size() > 0) {
            for (BluetoothDevice device : pairedDevices) {
                mDevice = device;
                mTextView.setText("디바이스 : " + mDevice.getName()  + mDevice.getAddress());
            }
        }
    }
    void drawGraph() {
        canvas.drawColor(0, PorterDuff.Mode.CLEAR); // erase previous graph!!!
        canvas.drawColor(Color.BLUE);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(Color.WHITE);
        paint.setStrokeWidth(1);
        paint.setTextSize(30);
        canvas.drawText(Y_string,(canvas.getWidth() / 2) - 90, 30, paint);
        canvas.drawText("시간",canvas.getWidth()-60, canvas.getHeight() / 2+30,paint);
        canvas.drawLine(                      // X 축
                0,                            // X start
                canvas.getHeight() / 2,       // Y start
                canvas.getWidth(),            // X end
                canvas.getHeight() / 2,       // Y end
                paint);
        canvas.drawLine(                     // Y 축
                canvas.getWidth() / 2,       // X start
                0,                           // Y start
                canvas.getWidth() / 2,       // X end
                canvas.getHeight(),          // Y end
                paint);

        paint.setColor(Color.WHITE);

        for (int i = 0; i <= canvas.getHeight()/20; i++) {
            canvas.drawLine(i * 20, (canvas.getHeight() / 2) - 10, i * 20, (canvas.getHeight() / 2) + 10, paint);   // X축 눈금
            canvas.drawLine((canvas.getWidth() / 2) - 10, i * 20, (canvas.getWidth() / 2) + 10, i * 20, paint);     // Y축 눈금
        }
        paint.setColor(Color.YELLOW);
        paint.setStrokeWidth(2);


        int xSmallAxis = GRAPH_WIDTH / MAX_Y_NUMBER;


        for (int i = 0; i < MAX_Y_NUMBER-1; i++) {
            canvas.drawLine(i*xSmallAxis + xSmallAxis/2,     plotYValue[i],
                    (i+1)*xSmallAxis + xSmallAxis/2, plotYValue[i + 1], paint);
            canvas.drawCircle(i*xSmallAxis + xSmallAxis/2, plotYValue[i], 3, paint);
        }
        mImageView.setImageBitmap(bitmap);
    }
    @Override
    protected void onDestroy() {
        super.onDestroy();
    }
}
